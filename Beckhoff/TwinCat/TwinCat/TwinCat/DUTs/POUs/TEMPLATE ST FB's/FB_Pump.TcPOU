<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_Pump" Id="{931c1a52-a0aa-41e4-a7c2-5a8bc2c2afbf}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PumpControl
VAR_input
    // Inputs
    StartManual : BOOL := FALSE;            // Manual start signal
    StopManual : BOOL := FALSE;             // Manual stop signal
    StartAuto : BOOL := FALSE;              // Automatic start signal
    StopAuto : BOOL := FALSE;               // Automatic stop signal
    SafetyInterlock : BOOL := TRUE;         // Safety interlock active (prevents operation)
    Pump1Running : BOOL := FALSE;           // Status of Pump 1
    Pump2Running : BOOL := FALSE;           // Status of Pump 2
    Temperature : REAL := 0.0;              // Pump temperature
    Pressure : REAL := 0.0;                 // Pump pressure
    BrakeCommand : BOOL := FALSE;           // Brake control command
end_var
VAR_OUTPUT
    // Outputs
    Pump1Status : BOOL := FALSE;            // Pump 1 running status
    Pump2Status : BOOL := FALSE;            // Pump 2 running status
    BrakeStatus : BOOL := FALSE;            // Brake status (on/off)
    FaultStatus : BOOL := FALSE;            // Fault status (if any)
    PumpStatus : INT := 0;                  // Pump operational status (0=Off, 1=Running, 2=Fault)
END_VAR
var
    // Internal Variables
    PumpMode : INT := 0;                    // 0 = Manual, 1 = Auto
    PumpState : INT := 0;                   // 0 = Off, 1 = Running, 2 = Fault
    BrakeState : BOOL := FALSE;             // Brake applied or not
    Pump1Priority : BOOL := TRUE;           // Flag for load sharing (Pump 1 priority)
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Main Control Logic

    // Handle Safety Interlock - If interlock is active, stop the pumps
    IF NOT SafetyInterlock THEN
        FaultStatus := TRUE;
        PumpStatus := 2;  // Fault status
        Pump1Status := FALSE;
        Pump2Status := FALSE;
        BrakeStatus := TRUE; // Apply brake in case of interlock
        RETURN;
    END_IF

    // Handle Pump Operation Mode (Manual/Auto)
    CASE PumpMode OF
        0: // Manual Mode
            // Manual Start/Stop Logic
            IF StartManual THEN
                // If not already running, start the pump
                IF NOT Pump1Running AND NOT Pump2Running THEN
                    IF Pump1Priority THEN
                        Pump1Running := TRUE;
                    ELSE
                        Pump2Running := TRUE;
                    END_IF
                    PumpStatus := 1;  // Running
                END_IF
            ELSIF StopManual THEN
                // Stop both pumps manually
                Pump1Running := FALSE;
                Pump2Running := FALSE;
                PumpStatus := 0;  // Stopped
            END_IF
        1: // Automatic Mode
            // Automatically control pumps based on conditions (e.g., pressure or temperature)
            IF Pressure < 50.0 THEN  // If pressure is too low, start the pumps
                IF NOT Pump1Running AND NOT Pump2Running THEN
                    IF Pump1Priority THEN
                        Pump1Running := TRUE;
                    ELSE
                        Pump2Running := TRUE;
                    END_IF
                    PumpStatus := 1;  // Running
                END_IF
            ELSIF Pressure >= 50.0 THEN  // Stop pumps if pressure is sufficient
                Pump1Running := FALSE;
                Pump2Running := FALSE;
                PumpStatus := 0;  // Stopped
            END_IF
    END_CASE

    // Handle Load Sharing (Tandem Operation)
    IF Pump1Running AND Pump2Running THEN
        // If both pumps are running, share load equally
        IF Pump1Priority THEN
            Pump2Running := FALSE;  // Disable Pump 2 to avoid overloading Pump 1
        ELSE
            Pump1Running := FALSE;  // Disable Pump 1 to avoid overloading Pump 2
        END_IF
    END_IF

    // Update Pump Status
    IF Pump1Running THEN
        Pump1Status := TRUE;
    ELSE
        Pump1Status := FALSE;
    END_IF

    IF Pump2Running THEN
        Pump2Status := TRUE;
    ELSE
        Pump2Status := FALSE;
    END_IF

    // Handle Brake Control
    IF BrakeCommand THEN
        BrakeStatus := TRUE;  // Apply brake
        BrakeState := TRUE;   // Brake applied
    ELSE
        BrakeStatus := FALSE; // Release brake
        BrakeState := FALSE;  // Brake released
    END_IF

    // Update Pump State
    IF NOT Pump1Running AND NOT Pump2Running THEN
        PumpState := 0;  // Pump is off
    ELSIF Pump1Running OR Pump2Running THEN
        PumpState := 1;  // Pump is running
    ELSE
        PumpState := 2;  // Fault state
    END_IF
]]></ST>
    </Implementation>
    <LineIds Name="FB_Pump">
      <LineId Id="64" Count="1" />
      <LineId Id="67" Count="88" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>