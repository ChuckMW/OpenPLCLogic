<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="Auto_Manual_CycleControl" Id="{5f18d4fc-def1-4f59-880c-59b039f8f5d4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Auto_Manual_CycleControl
VAR_input
    // Inputs
    StartManual : BOOL := FALSE;           // Manual start signal
    StopManual : BOOL := FALSE;            // Manual stop signal
    StartAuto : BOOL := FALSE;             // Auto start signal
    StopAuto : BOOL := FALSE;              // Auto stop signal
    EmergencyStop : BOOL := FALSE;         // Emergency fast stop signal
    ModeSelect : INT := 0;                 // Mode select (0 = Manual, 1 = Auto)
    CycleStopDelay : TIME := T#10s;        // Time delay after stop command
    CycleStartDelay : TIME := T#5s;        // Time delay before cycle starts (Auto Mode)
    FaultCondition : BOOL := FALSE;        // Fault condition indicator
END_VAR
VAR_OUTPUT
    // Outputs
    CycleStatus : INT := 0;                // Cycle status (0 = stopped, 1 = running, 2 = fault)
    CycleRunning : BOOL := FALSE;          // Boolean indicating if cycle is running
    FaultLog : STRING := '';               // String for fault logging
    CycleDelayTimer : TON;                 // Timer for cycle stop delay
    CycleStartDelayTimer : TON;            // Timer for cycle start delay (Auto Mode)
    EmergencyStopActive : BOOL := FALSE;   // Boolean indicating emergency stop status
    BuzzerOutput : BOOL := FALSE;          // Pulsed Buzzer output
END_VAR
var
    // Internal Variables
    CycleState : INT := 0;                 // Internal state (0 = stopped, 1 = running, 2 = fault)
    FaultLogged : BOOL := FALSE;           // Flag to check if fault has been logged
    CycleMode : INT := 0;                  // Operating mode (0 = Manual, 1 = Auto)
    BuzzerPulseTimer : TON;                // Timer for pulsing the buzzer
    BuzzerActive : BOOL := FALSE;          // Flag to control buzzer pulsing
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Main Control Method

    // Handle Emergency Stop (Immediate Stop)
    IF EmergencyStop THEN
        EmergencyStopActive := TRUE;
        CycleState := 0;           // Stop cycle immediately
        CycleRunning := FALSE;     // Not running
        FaultLog := 'Emergency Stop Activated';
        CycleStatus := 2;          // Set status to fault due to emergency stop
        BuzzerOutput := FALSE;     // Ensure buzzer is off during emergency stop
        RETURN;                    // Exit as emergency stop has priority
    END_IF

    // Handle Fault Condition
    IF FaultCondition AND NOT FaultLogged THEN
        FaultLog := 'Fault Detected';
        FaultLogged := TRUE;       // Log the fault once
        CycleStatus := 2;          // Set status to fault
        CycleState := 0;           // Stop cycle if there's a fault
        CycleRunning := FALSE;
        BuzzerOutput := FALSE;     // Ensure buzzer is off in fault condition
        RETURN;
    END_IF

    // Mode Control (Auto/Manual)
    CASE ModeSelect OF
        0:  // Manual Mode (Immediate Start/Stop)
            // Manual Start/Stop Logic (Immediate)
            IF StartManual THEN
                CycleState := 1;       // Start cycle immediately
                CycleRunning := TRUE;  // Cycle is running
                CycleStatus := 1;      // Set status to running
                FaultLog := 'Manual Start';
                BuzzerOutput := FALSE; // Ensure buzzer is off in manual mode
            ELSIF StopManual THEN
                CycleState := 0;       // Stop cycle immediately
                CycleRunning := FALSE; // Cycle is stopped
                CycleStatus := 0;      // Set status to stopped
                FaultLog := 'Manual Stop';
                BuzzerOutput := FALSE; // Ensure buzzer is off in manual mode
            END_IF
        1:  // Auto Mode
            // Auto Start/Stop Logic (With Start Delay)
            IF StartAuto THEN
                CycleState := 1;       // Start cycle in auto mode
                CycleRunning := FALSE; // Initially not running
                CycleStartDelayTimer(IN := TRUE, PT := CycleStartDelay);  // Start delay timer
                BuzzerActive := TRUE;   // Activate buzzer pulsing
                CycleStatus := 1;       // Set status to running
                FaultLog := 'Auto Start (Delay in Progress)';
            ELSIF StopAuto THEN
                // Start stop delay
                CycleDelayTimer(IN := TRUE, PT := CycleStopDelay);  // Start delay timer
                IF CycleDelayTimer.Q THEN
                    CycleState := 0;    // Stop cycle after delay
                    CycleRunning := FALSE;
                    CycleStatus := 0;   // Set status to stopped
                    FaultLog := 'Auto Stop with Delay';
                END_IF
            END_IF
        ELSE
            // Default case: No action
            FaultLog := 'Invalid Mode';
            CycleStatus := 2;          // Set status to fault
            BuzzerOutput := FALSE;     // Ensure buzzer is off
    END_CASE

    // Buzzer Pulsing Logic for Auto Mode Start
    IF BuzzerActive THEN
        BuzzerPulseTimer(IN := TRUE, PT := T#500ms);  // Pulsing every 500ms
        IF BuzzerPulseTimer.Q THEN
            BuzzerOutput := NOT BuzzerOutput;  // Toggle buzzer state (pulse)
            BuzzerPulseTimer(IN := FALSE);    // Reset timer
        END_IF
    END_IF

    // End of Start Delay (Auto Mode)
    IF CycleStartDelayTimer.Q THEN
        BuzzerOutput := FALSE;    // Turn off buzzer when start delay is finished
        CycleRunning := TRUE;     // Start the cycle after delay
        FaultLog := 'Cycle Started';
    END_IF

    // Cycle Diagnostics
    IF CycleState = 1 THEN
        // Running diagnostics while in running state
        FaultLog := 'Cycle Running in ' + CASE ModeSelect OF 0: 'Manual'; 1: 'Auto'; END_CASE + ' Mode';
    ELSIF CycleState = 0 THEN
        // Stopped state diagnostics
        IF FaultCondition THEN
            FaultLog := 'Cycle Stopped due to Fault';
        ELSE
            FaultLog := 'Cycle Stopped';
        END_IF
    END_IF
]]></ST>
    </Implementation>
    <LineIds Name="Auto_Manual_CycleControl">
      <LineId Id="317" Count="1" />
      <LineId Id="320" Count="93" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>