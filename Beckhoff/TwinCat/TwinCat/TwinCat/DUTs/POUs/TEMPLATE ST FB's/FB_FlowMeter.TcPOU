<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_FlowMeter" Id="{cc7c5d0c-48e9-4e0c-8b5f-cd9c6d536b69}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_FlowmeterControl
VAR_Input
    // Inputs
    FlowInput : REAL;              // Raw flowmeter signal (analog value or pulse count)
    FlowRangeMin : REAL := 0.0;    // Minimum expected flow value (e.g., 0 for no flow)
    FlowRangeMax : REAL := 100.0;  // Maximum expected flow value (e.g., 100 liters per minute)
    ResetCounter : BOOL := FALSE;  // Reset the total flow count (TRUE to reset)
    AlarmEnable : BOOL := TRUE;    // Enable or disable alarm monitoring
    CalibrationFactor : REAL := 1.0; // Calibration factor to adjust flow measurements
END_VAR
var_output
    // Outputs
    FlowRate : REAL := 0.0;         // Current flow rate (e.g., liters per minute)
    TotalFlow : REAL := 0.0;        // Total accumulated flow
    FlowStatus : INT := 0;          // Flowmeter status (0 = normal, 1 = error)
    FlowError : BOOL := FALSE;      // Flag for flowmeter error (TRUE if error)
    AlarmStatus : BOOL := FALSE;    // Alarm status (TRUE if alarm condition triggered)
    Diagnostics : STRING := '';     // Diagnostic message (e.g., "Calibration OK", "Sensor Error")
END_VAR
var
    // Internal variables
    FlowCounter : REAL := 0.0;      // Accumulated flow count for total flow calculation
    LastFlowTime : TIME := T#0s;    // Last update time for rate calculation
    FlowRateCalc : REAL := 0.0;     // Calculated flow rate (before adjustment)
    AlarmThresholdLow : REAL := 1.0; // Low flow threshold for alarm
    AlarmThresholdHigh : REAL := 95.0; // High flow threshold for alarm
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Main Control Method

    // 1. Check the flow input (validate it is within expected range)
    IF FlowInput < FlowRangeMin OR FlowInput > FlowRangeMax THEN
        FlowStatus := 1; // Error: Out of range
        FlowError := TRUE; // Set error flag
        Diagnostics := 'Flow input out of range'; // Diagnostic message
        FlowRate := 0.0; // Set flow rate to zero in error state
        AlarmStatus := TRUE; // Trigger alarm due to out-of-range flow
    ELSE
        FlowStatus := 0; // Normal operation
        FlowError := FALSE; // No error
        AlarmStatus := FALSE; // No alarm
    END_IF
    
    // 2. Apply calibration factor to the flow input (adjust the flow rate)
    FlowRateCalc := FlowInput * CalibrationFactor;
    
    // 3. Calculate the current flow rate (e.g., liters per minute)
    // Assuming FlowInput is in pulse count per second, we convert it to flow rate:
    FlowRate := FlowRateCalc; // You can adjust this calculation based on your flowmeter's characteristics

    // 4. Update total flow count
    // If it's based on pulses, you would accumulate pulse counts here
    TotalFlow := TotalFlow + FlowRate * REAL(TIME_TO_REAL(TIME_NOW - LastFlowTime)); // Update total flow over time

    // 5. Handle reset of total flow count
    IF ResetCounter THEN
        TotalFlow := 0.0; // Reset total flow count when requested
        Diagnostics := 'Total flow reset'; // Diagnostic message
    END_IF

    // 6. Handle alarms based on flow thresholds
    IF AlarmEnable THEN
        IF FlowRate < AlarmThresholdLow THEN
            AlarmStatus := TRUE; // Trigger alarm if flow rate is too low
            Diagnostics := 'Flow too low'; // Diagnostic message
        ELSIF FlowRate > AlarmThresholdHigh THEN
            AlarmStatus := TRUE; // Trigger alarm if flow rate is too high
            Diagnostics := 'Flow too high'; // Diagnostic message
        END_IF
    END_IF

    // 7. Update last flow time (to calculate flow rate over time)
    LastFlowTime := TIME_NOW; // Save current time for next flow rate calculation
]]></ST>
    </Implementation>
    <LineIds Name="FB_FlowMeter">
      <LineId Id="63" Count="1" />
      <LineId Id="66" Count="43" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>