<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_analog" Id="{3549c48c-174e-4d8c-842e-cf770921296d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AnalogSignalControl
VAR_INPUT
    // Inputs
    AnalogInput : REAL;              // Raw input signal (either 4-20mA or 0-10V)
    SignalType : INT := 0;           // Signal type (0 = 4-20mA, 1 = 0-10V)
    LowLimitInput : REAL := 4.0;     // Low limit for the input signal (4mA or 0V)
    HighLimitInput : REAL := 20.0;   // High limit for the input signal (20mA or 10V)
    LowLimitOutput : REAL := 0.0;    // Low limit for the output engineering units
    HighLimitOutput : REAL := 100.0; // High limit for the output engineering units
    InputUnit : STRING := 'mA';      // Input signal unit (either 'mA' or 'V')
    OutputUnit : STRING := 'psi';    // Desired output units (e.g., 'psi', 'C')
END_VAR
VAR_OUTPUT
    // Outputs
    ProcessVariable : REAL := 0.0;   // Converted process variable (e.g., pressure, temperature)
    AnalogStatus : STRING := 'Normal'; // Status of the analog signal (Normal, Error)
    ErrorFlag : BOOL := FALSE;       // Error flag (TRUE if there is an error)
 END_VAR
var  
    // Internal variables
    ScaledSignal : REAL := 0.0;     // Scaled signal to engineering units
    SignalRange : REAL := 0.0;      // Range of the input signal (HighLimitInput - LowLimitInput)
    OutputRange : REAL := 0.0;      // Range of the output engineering units (HighLimitOutput - LowLimitOutput)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Main Control Method

    // 1. Check if input signal is within valid range
    IF SignalType = 0 THEN
        // 4-20mA range check
        IF AnalogInput < LowLimitInput OR AnalogInput > HighLimitInput THEN
            AnalogStatus := 'Out of Range';
            ErrorFlag := TRUE;
            ProcessVariable := 0.0;
            Diagnostics := 'Signal out of range for 4-20mA';
            RETURN;  // Exit if error
        END_IF
    ELSIF SignalType = 1 THEN
        // 0-10V range check
        IF AnalogInput < LowLimitInput OR AnalogInput > HighLimitInput THEN
            AnalogStatus := 'Out of Range';
            ErrorFlag := TRUE;
            ProcessVariable := 0.0;
            Diagnostics := 'Signal out of range for 0-10V';
            RETURN;  // Exit if error
        END_IF
    ELSE
        AnalogStatus := 'Invalid Signal Type';
        ErrorFlag := TRUE;
        Diagnostics := 'Invalid signal type';
        RETURN;
    END_IF

    // 2. Scale the input signal to the output range (engineering units)
    ScaledSignal := (AnalogInput - LowLimitInput) * OutputRange / SignalRange + LowLimitOutput;

    // 3. Assign scaled signal to process variable
    ProcessVariable := ScaledSignal;

    // 4. Status update
    AnalogStatus := 'Normal';  // Set status to normal since no error was detected
    ErrorFlag := FALSE;        // Reset error flag
]]></ST>
    </Implementation>
    <LineIds Name="FB_analog">
      <LineId Id="66" Count="0" />
      <LineId Id="68" Count="35" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>