<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_StackLight" Id="{98cb5e03-b3b7-4add-a1db-668346a2f1b4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_StackLightControl
VAR_INPUT
    // Inputs for control
    GreenLightOn : BOOL := FALSE;            // Green light control signal
    BlueLightOn : BOOL := FALSE;             // Blue light control signal
    RedLightOn : BOOL := FALSE;              // Red light control signal
    YellowLightOn : BOOL := FALSE;           // Yellow light control signal
    BuzzerOn : BOOL := FALSE;                // Buzzer control signal

    PulseGreen : BOOL := FALSE;              // Pulse control for green light
    PulseBlue : BOOL := FALSE;               // Pulse control for blue light
    PulseRed : BOOL := FALSE;                // Pulse control for red light
    PulseYellow : BOOL := FALSE;             // Pulse control for yellow light
    BuzzerPulseLength : TIME := T#500ms;     // Pulse length for the buzzer

    PulseLengthGreen : TIME := T#500ms;      // Pulse length for green light
    PulseLengthBlue : TIME := T#500ms;       // Pulse length for blue light
    PulseLengthRed : TIME := T#500ms;        // Pulse length for red light
    PulseLengthYellow : TIME := T#500ms;     // Pulse length for yellow light
END_VAR
VAR_OUTPUT
    // Outputs
    GreenLightOut : BOOL := FALSE;           // Output for green light
    BlueLightOut : BOOL := FALSE;            // Output for blue light
    RedLightOut : BOOL := FALSE;             // Output for red light
    YellowLightOut : BOOL := FALSE;          // Output for yellow light
    BuzzerOut : BOOL := FALSE;               // Output for buzzer
END_VAR
VAR
    // Internal variables for pulsing
    GreenPulseTimer : TON;                   // Timer for pulsing green light
    BluePulseTimer : TON;                    // Timer for pulsing blue light
    RedPulseTimer : TON;                     // Timer for pulsing red light
    YellowPulseTimer : TON;                  // Timer for pulsing yellow light
    BuzzerPulseTimer : TON;                  // Timer for pulsing buzzer

    GreenLightState : BOOL := FALSE;         // Current state of green light
    BlueLightState : BOOL := FALSE;          // Current state of blue light
    RedLightState : BOOL := FALSE;           // Current state of red light
    YellowLightState : BOOL := FALSE;        // Current state of yellow light
    BuzzerState : BOOL := FALSE;             // Current state of buzzer
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Main Control Method

    // Handle Green Light Control (Pulsing and Steady State)
    IF PulseGreen THEN
        GreenPulseTimer(IN := TRUE, PT := PulseLengthGreen); // Pulse timer for green light
        IF GreenPulseTimer.Q THEN
            GreenLightOut := NOT GreenLightOut;   // Toggle green light
            GreenPulseTimer(IN := FALSE);         // Reset timer
        END_IF
    ELSIF GreenLightOn THEN
        GreenLightOut := TRUE;  // Steady green light
    ELSE
        GreenLightOut := FALSE; // Turn off green light
    END_IF

    // Handle Blue Light Control (Pulsing and Steady State)
    IF PulseBlue THEN
        BluePulseTimer(IN := TRUE, PT := PulseLengthBlue); // Pulse timer for blue light
        IF BluePulseTimer.Q THEN
            BlueLightOut := NOT BlueLightOut;   // Toggle blue light
            BluePulseTimer(IN := FALSE);        // Reset timer
        END_IF
    ELSIF BlueLightOn THEN
        BlueLightOut := TRUE;  // Steady blue light
    ELSE
        BlueLightOut := FALSE; // Turn off blue light
    END_IF

    // Handle Red Light Control (Pulsing and Steady State)
    IF PulseRed THEN
        RedPulseTimer(IN := TRUE, PT := PulseLengthRed); // Pulse timer for red light
        IF RedPulseTimer.Q THEN
            RedLightOut := NOT RedLightOut;   // Toggle red light
            RedPulseTimer(IN := FALSE);       // Reset timer
        END_IF
    ELSIF RedLightOn THEN
        RedLightOut := TRUE;  // Steady red light
    ELSE
        RedLightOut := FALSE; // Turn off red light
    END_IF

    // Handle Yellow Light Control (Pulsing and Steady State)
    IF PulseYellow THEN
        YellowPulseTimer(IN := TRUE, PT := PulseLengthYellow); // Pulse timer for yellow light
        IF YellowPulseTimer.Q THEN
            YellowLightOut := NOT YellowLightOut;   // Toggle yellow light
            YellowPulseTimer(IN := FALSE);           // Reset timer
        END_IF
    ELSIF YellowLightOn THEN
        YellowLightOut := TRUE;  // Steady yellow light
    ELSE
        YellowLightOut := FALSE; // Turn off yellow light
    END_IF

    // Handle Buzzer Control (Pulsing and Steady State)
    IF BuzzerOn THEN
        BuzzerPulseTimer(IN := TRUE, PT := BuzzerPulseLength);  // Pulse timer for buzzer
        IF BuzzerPulseTimer.Q THEN
            BuzzerOut := NOT BuzzerOut;    // Toggle buzzer
            BuzzerPulseTimer(IN := FALSE); // Reset timer
        END_IF
    ELSE
        BuzzerOut := FALSE;  // Turn off buzzer
    END_IF

]]></ST>
    </Implementation>
    <LineIds Name="FB_StackLight">
      <LineId Id="81" Count="1" />
      <LineId Id="84" Count="63" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>