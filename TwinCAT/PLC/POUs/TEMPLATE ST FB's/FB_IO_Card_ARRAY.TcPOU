<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_IO_Card_ARRAY" Id="{1928ae18-e067-4171-8e04-8a0c411f4399}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_IO_Card_ARRAY
VAR_INPUT
    // Inputs: 16 Discrete Inputs, Debounce Times, and Inversion Flags
    DiscreteInputs : ARRAY[1..16] OF BOOL := [FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];  // 16 Discrete Inputs
    DebounceTimes : ARRAY[1..16] OF TIME := [T#100ms, T#100ms, T#100ms, T#100ms, T#100ms, T#100ms, T#100ms, T#100ms, T#100ms, T#100ms, T#100ms, T#100ms, T#100ms, T#100ms, T#100ms, T#100ms]; // Debounce times for each input
    Inversion : ARRAY[1..16] OF BOOL := [FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE]; // Inversion flag for each input/output
END_VAR
VAR_OUTPUT
    // Outputs: 16 Discrete Outputs (Controlled by Debounced Inputs)
    DiscreteOutputs : ARRAY[1..16] OF BOOL := [FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];  // 16 Discrete Outputs
    DebouncedInputs : ARRAY[1..16] OF BOOL := [FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE]; // Debounced inputs after processing
 END_VAR
Var   
    // Internal Variables: 16 Timers for debounce logic and last input states
    InputTimers : ARRAY[1..16] OF TON; // Timers for debounce filtering
    LastInputState : ARRAY[1..16] OF BOOL := [FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE]; // Store previous state of each input
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Main Control Method

    FOR i := 1 TO 16 DO
        // Start the debounce timer for each input
        IF DiscreteInputs[i] <> LastInputState[i] THEN
            InputTimers[i](IN := TRUE);  // Start the timer when the input changes state
        ELSE
            InputTimers[i](IN := FALSE);  // Stop the timer if no change
        END_IF
        
        // If timer has completed and the state has stabilized, update the debounced input
        IF InputTimers[i].Q THEN
            DebouncedInputs[i] := DiscreteInputs[i]; // Accept the new stable state after debounce
            LastInputState[i] := DiscreteInputs[i];  // Store the new input state
        END_IF
        
        // Handle Inversion for both Input and Output
        IF Inversion[i] THEN
            DebouncedInputs[i] := NOT DebouncedInputs[i]; // Invert the input signal
        END_IF
        
        // Set the corresponding output based on the debounced and possibly inverted input
        DiscreteOutputs[i] := DebouncedInputs[i]; // Set the output to the debounced input value
    END_FOR

]]></ST>
    </Implementation>
    <LineIds Name="FB_IO_Card_ARRAY">
      <LineId Id="50" Count="1" />
      <LineId Id="53" Count="23" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>